/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qq.routercenter.share.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.annotation.JsonInclude;

@XmlAccessorType(XmlAccessType.PROPERTY)
@XmlRootElement
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class RouteRuleInfo implements org.apache.thrift.TBase<RouteRuleInfo, RouteRuleInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RouteRuleInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RouteRuleInfo");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SRC_PROP_FIELD_DESC = new org.apache.thrift.protocol.TField("srcProp", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SRC_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("srcOp", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SRC_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("srcValue", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DESTINATION_FIELD_DESC = new org.apache.thrift.protocol.TField("destination", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RouteRuleInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RouteRuleInfoTupleSchemeFactory());
  }

  public String type; // required
  public String srcProp; // optional
  public String srcOp; // optional
  public String srcValue; // optional
  public String destination; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPE((short)1, "type"),
    SRC_PROP((short)2, "srcProp"),
    SRC_OP((short)3, "srcOp"),
    SRC_VALUE((short)4, "srcValue"),
    DESTINATION((short)5, "destination");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // SRC_PROP
          return SRC_PROP;
        case 3: // SRC_OP
          return SRC_OP;
        case 4: // SRC_VALUE
          return SRC_VALUE;
        case 5: // DESTINATION
          return DESTINATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.SRC_PROP,_Fields.SRC_OP,_Fields.SRC_VALUE,_Fields.DESTINATION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SRC_PROP, new org.apache.thrift.meta_data.FieldMetaData("srcProp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SRC_OP, new org.apache.thrift.meta_data.FieldMetaData("srcOp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SRC_VALUE, new org.apache.thrift.meta_data.FieldMetaData("srcValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESTINATION, new org.apache.thrift.meta_data.FieldMetaData("destination", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RouteRuleInfo.class, metaDataMap);
  }

  public RouteRuleInfo() {
  }

  public RouteRuleInfo(
    String type)
  {
    this();
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RouteRuleInfo(RouteRuleInfo other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetSrcProp()) {
      this.srcProp = other.srcProp;
    }
    if (other.isSetSrcOp()) {
      this.srcOp = other.srcOp;
    }
    if (other.isSetSrcValue()) {
      this.srcValue = other.srcValue;
    }
    if (other.isSetDestination()) {
      this.destination = other.destination;
    }
  }

  public RouteRuleInfo deepCopy() {
    return new RouteRuleInfo(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.srcProp = null;
    this.srcOp = null;
    this.srcValue = null;
    this.destination = null;
  }

  public String getType() {
    return this.type;
  }

  public RouteRuleInfo setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getSrcProp() {
    return this.srcProp;
  }

  public RouteRuleInfo setSrcProp(String srcProp) {
    this.srcProp = srcProp;
    return this;
  }

  public void unsetSrcProp() {
    this.srcProp = null;
  }

  /** Returns true if field srcProp is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcProp() {
    return this.srcProp != null;
  }

  public void setSrcPropIsSet(boolean value) {
    if (!value) {
      this.srcProp = null;
    }
  }

  public String getSrcOp() {
    return this.srcOp;
  }

  public RouteRuleInfo setSrcOp(String srcOp) {
    this.srcOp = srcOp;
    return this;
  }

  public void unsetSrcOp() {
    this.srcOp = null;
  }

  /** Returns true if field srcOp is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcOp() {
    return this.srcOp != null;
  }

  public void setSrcOpIsSet(boolean value) {
    if (!value) {
      this.srcOp = null;
    }
  }

  public String getSrcValue() {
    return this.srcValue;
  }

  public RouteRuleInfo setSrcValue(String srcValue) {
    this.srcValue = srcValue;
    return this;
  }

  public void unsetSrcValue() {
    this.srcValue = null;
  }

  /** Returns true if field srcValue is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcValue() {
    return this.srcValue != null;
  }

  public void setSrcValueIsSet(boolean value) {
    if (!value) {
      this.srcValue = null;
    }
  }

  public String getDestination() {
    return this.destination;
  }

  public RouteRuleInfo setDestination(String destination) {
    this.destination = destination;
    return this;
  }

  public void unsetDestination() {
    this.destination = null;
  }

  /** Returns true if field destination is set (has been assigned a value) and false otherwise */
  public boolean isSetDestination() {
    return this.destination != null;
  }

  public void setDestinationIsSet(boolean value) {
    if (!value) {
      this.destination = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case SRC_PROP:
      if (value == null) {
        unsetSrcProp();
      } else {
        setSrcProp((String)value);
      }
      break;

    case SRC_OP:
      if (value == null) {
        unsetSrcOp();
      } else {
        setSrcOp((String)value);
      }
      break;

    case SRC_VALUE:
      if (value == null) {
        unsetSrcValue();
      } else {
        setSrcValue((String)value);
      }
      break;

    case DESTINATION:
      if (value == null) {
        unsetDestination();
      } else {
        setDestination((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case SRC_PROP:
      return getSrcProp();

    case SRC_OP:
      return getSrcOp();

    case SRC_VALUE:
      return getSrcValue();

    case DESTINATION:
      return getDestination();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case SRC_PROP:
      return isSetSrcProp();
    case SRC_OP:
      return isSetSrcOp();
    case SRC_VALUE:
      return isSetSrcValue();
    case DESTINATION:
      return isSetDestination();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RouteRuleInfo)
      return this.equals((RouteRuleInfo)that);
    return false;
  }

  public boolean equals(RouteRuleInfo that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_srcProp = true && this.isSetSrcProp();
    boolean that_present_srcProp = true && that.isSetSrcProp();
    if (this_present_srcProp || that_present_srcProp) {
      if (!(this_present_srcProp && that_present_srcProp))
        return false;
      if (!this.srcProp.equals(that.srcProp))
        return false;
    }

    boolean this_present_srcOp = true && this.isSetSrcOp();
    boolean that_present_srcOp = true && that.isSetSrcOp();
    if (this_present_srcOp || that_present_srcOp) {
      if (!(this_present_srcOp && that_present_srcOp))
        return false;
      if (!this.srcOp.equals(that.srcOp))
        return false;
    }

    boolean this_present_srcValue = true && this.isSetSrcValue();
    boolean that_present_srcValue = true && that.isSetSrcValue();
    if (this_present_srcValue || that_present_srcValue) {
      if (!(this_present_srcValue && that_present_srcValue))
        return false;
      if (!this.srcValue.equals(that.srcValue))
        return false;
    }

    boolean this_present_destination = true && this.isSetDestination();
    boolean that_present_destination = true && that.isSetDestination();
    if (this_present_destination || that_present_destination) {
      if (!(this_present_destination && that_present_destination))
        return false;
      if (!this.destination.equals(that.destination))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RouteRuleInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrcProp()).compareTo(other.isSetSrcProp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcProp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcProp, other.srcProp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrcOp()).compareTo(other.isSetSrcOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcOp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcOp, other.srcOp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrcValue()).compareTo(other.isSetSrcValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcValue, other.srcValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDestination()).compareTo(other.isSetDestination());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestination()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destination, other.destination);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RouteRuleInfo(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetSrcProp()) {
      if (!first) sb.append(", ");
      sb.append("srcProp:");
      if (this.srcProp == null) {
        sb.append("null");
      } else {
        sb.append(this.srcProp);
      }
      first = false;
    }
    if (isSetSrcOp()) {
      if (!first) sb.append(", ");
      sb.append("srcOp:");
      if (this.srcOp == null) {
        sb.append("null");
      } else {
        sb.append(this.srcOp);
      }
      first = false;
    }
    if (isSetSrcValue()) {
      if (!first) sb.append(", ");
      sb.append("srcValue:");
      if (this.srcValue == null) {
        sb.append("null");
      } else {
        sb.append(this.srcValue);
      }
      first = false;
    }
    if (isSetDestination()) {
      if (!first) sb.append(", ");
      sb.append("destination:");
      if (this.destination == null) {
        sb.append("null");
      } else {
        sb.append(this.destination);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RouteRuleInfoStandardSchemeFactory implements SchemeFactory {
    public RouteRuleInfoStandardScheme getScheme() {
      return new RouteRuleInfoStandardScheme();
    }
  }

  private static class RouteRuleInfoStandardScheme extends StandardScheme<RouteRuleInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RouteRuleInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SRC_PROP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.srcProp = iprot.readString();
              struct.setSrcPropIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SRC_OP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.srcOp = iprot.readString();
              struct.setSrcOpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SRC_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.srcValue = iprot.readString();
              struct.setSrcValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESTINATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.destination = iprot.readString();
              struct.setDestinationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RouteRuleInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.srcProp != null) {
        if (struct.isSetSrcProp()) {
          oprot.writeFieldBegin(SRC_PROP_FIELD_DESC);
          oprot.writeString(struct.srcProp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.srcOp != null) {
        if (struct.isSetSrcOp()) {
          oprot.writeFieldBegin(SRC_OP_FIELD_DESC);
          oprot.writeString(struct.srcOp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.srcValue != null) {
        if (struct.isSetSrcValue()) {
          oprot.writeFieldBegin(SRC_VALUE_FIELD_DESC);
          oprot.writeString(struct.srcValue);
          oprot.writeFieldEnd();
        }
      }
      if (struct.destination != null) {
        if (struct.isSetDestination()) {
          oprot.writeFieldBegin(DESTINATION_FIELD_DESC);
          oprot.writeString(struct.destination);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RouteRuleInfoTupleSchemeFactory implements SchemeFactory {
    public RouteRuleInfoTupleScheme getScheme() {
      return new RouteRuleInfoTupleScheme();
    }
  }

  private static class RouteRuleInfoTupleScheme extends TupleScheme<RouteRuleInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RouteRuleInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.type);
      BitSet optionals = new BitSet();
      if (struct.isSetSrcProp()) {
        optionals.set(0);
      }
      if (struct.isSetSrcOp()) {
        optionals.set(1);
      }
      if (struct.isSetSrcValue()) {
        optionals.set(2);
      }
      if (struct.isSetDestination()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSrcProp()) {
        oprot.writeString(struct.srcProp);
      }
      if (struct.isSetSrcOp()) {
        oprot.writeString(struct.srcOp);
      }
      if (struct.isSetSrcValue()) {
        oprot.writeString(struct.srcValue);
      }
      if (struct.isSetDestination()) {
        oprot.writeString(struct.destination);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RouteRuleInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.type = iprot.readString();
      struct.setTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.srcProp = iprot.readString();
        struct.setSrcPropIsSet(true);
      }
      if (incoming.get(1)) {
        struct.srcOp = iprot.readString();
        struct.setSrcOpIsSet(true);
      }
      if (incoming.get(2)) {
        struct.srcValue = iprot.readString();
        struct.setSrcValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.destination = iprot.readString();
        struct.setDestinationIsSet(true);
      }
    }
  }

}

