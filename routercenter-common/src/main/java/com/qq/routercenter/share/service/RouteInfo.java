/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qq.routercenter.share.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.annotation.JsonInclude;

@XmlAccessorType(XmlAccessType.PROPERTY)
@XmlRootElement
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class RouteInfo implements org.apache.thrift.TBase<RouteInfo, RouteInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RouteInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RouteInfo");

  private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("nodes", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField STRATEGIES_FIELD_DESC = new org.apache.thrift.protocol.TField("strategies", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField RULES_FIELD_DESC = new org.apache.thrift.protocol.TField("rules", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RouteInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RouteInfoTupleSchemeFactory());
  }

  public String sid; // required
  public List<RouteNodeInfo> nodes; // optional
  public Map<String,RouteStrategyInfo> strategies; // optional
  public List<RouteRuleInfo> rules; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SID((short)1, "sid"),
    NODES((short)2, "nodes"),
    STRATEGIES((short)3, "strategies"),
    RULES((short)4, "rules");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SID
          return SID;
        case 2: // NODES
          return NODES;
        case 3: // STRATEGIES
          return STRATEGIES;
        case 4: // RULES
          return RULES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.NODES,_Fields.STRATEGIES,_Fields.RULES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SID, new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODES, new org.apache.thrift.meta_data.FieldMetaData("nodes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RouteNodeInfo.class))));
    tmpMap.put(_Fields.STRATEGIES, new org.apache.thrift.meta_data.FieldMetaData("strategies", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RouteStrategyInfo.class))));
    tmpMap.put(_Fields.RULES, new org.apache.thrift.meta_data.FieldMetaData("rules", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RouteRuleInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RouteInfo.class, metaDataMap);
  }

  public RouteInfo() {
  }

  public RouteInfo(
    String sid)
  {
    this();
    this.sid = sid;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RouteInfo(RouteInfo other) {
    if (other.isSetSid()) {
      this.sid = other.sid;
    }
    if (other.isSetNodes()) {
      List<RouteNodeInfo> __this__nodes = new ArrayList<RouteNodeInfo>(other.nodes.size());
      for (RouteNodeInfo other_element : other.nodes) {
        __this__nodes.add(new RouteNodeInfo(other_element));
      }
      this.nodes = __this__nodes;
    }
    if (other.isSetStrategies()) {
      Map<String,RouteStrategyInfo> __this__strategies = new HashMap<String,RouteStrategyInfo>(other.strategies.size());
      for (Map.Entry<String, RouteStrategyInfo> other_element : other.strategies.entrySet()) {

        String other_element_key = other_element.getKey();
        RouteStrategyInfo other_element_value = other_element.getValue();

        String __this__strategies_copy_key = other_element_key;

        RouteStrategyInfo __this__strategies_copy_value = new RouteStrategyInfo(other_element_value);

        __this__strategies.put(__this__strategies_copy_key, __this__strategies_copy_value);
      }
      this.strategies = __this__strategies;
    }
    if (other.isSetRules()) {
      List<RouteRuleInfo> __this__rules = new ArrayList<RouteRuleInfo>(other.rules.size());
      for (RouteRuleInfo other_element : other.rules) {
        __this__rules.add(new RouteRuleInfo(other_element));
      }
      this.rules = __this__rules;
    }
  }

  public RouteInfo deepCopy() {
    return new RouteInfo(this);
  }

  @Override
  public void clear() {
    this.sid = null;
    this.nodes = null;
    this.strategies = null;
    this.rules = null;
  }

  public String getSid() {
    return this.sid;
  }

  public RouteInfo setSid(String sid) {
    this.sid = sid;
    return this;
  }

  public void unsetSid() {
    this.sid = null;
  }

  /** Returns true if field sid is set (has been assigned a value) and false otherwise */
  public boolean isSetSid() {
    return this.sid != null;
  }

  public void setSidIsSet(boolean value) {
    if (!value) {
      this.sid = null;
    }
  }

  public int getNodesSize() {
    return (this.nodes == null) ? 0 : this.nodes.size();
  }

  public java.util.Iterator<RouteNodeInfo> getNodesIterator() {
    return (this.nodes == null) ? null : this.nodes.iterator();
  }

  public void addToNodes(RouteNodeInfo elem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<RouteNodeInfo>();
    }
    this.nodes.add(elem);
  }

  public List<RouteNodeInfo> getNodes() {
    return this.nodes;
  }

  public RouteInfo setNodes(List<RouteNodeInfo> nodes) {
    this.nodes = nodes;
    return this;
  }

  public void unsetNodes() {
    this.nodes = null;
  }

  /** Returns true if field nodes is set (has been assigned a value) and false otherwise */
  public boolean isSetNodes() {
    return this.nodes != null;
  }

  public void setNodesIsSet(boolean value) {
    if (!value) {
      this.nodes = null;
    }
  }

  public int getStrategiesSize() {
    return (this.strategies == null) ? 0 : this.strategies.size();
  }

  public void putToStrategies(String key, RouteStrategyInfo val) {
    if (this.strategies == null) {
      this.strategies = new HashMap<String,RouteStrategyInfo>();
    }
    this.strategies.put(key, val);
  }

  public Map<String,RouteStrategyInfo> getStrategies() {
    return this.strategies;
  }

  public RouteInfo setStrategies(Map<String,RouteStrategyInfo> strategies) {
    this.strategies = strategies;
    return this;
  }

  public void unsetStrategies() {
    this.strategies = null;
  }

  /** Returns true if field strategies is set (has been assigned a value) and false otherwise */
  public boolean isSetStrategies() {
    return this.strategies != null;
  }

  public void setStrategiesIsSet(boolean value) {
    if (!value) {
      this.strategies = null;
    }
  }

  public int getRulesSize() {
    return (this.rules == null) ? 0 : this.rules.size();
  }

  public java.util.Iterator<RouteRuleInfo> getRulesIterator() {
    return (this.rules == null) ? null : this.rules.iterator();
  }

  public void addToRules(RouteRuleInfo elem) {
    if (this.rules == null) {
      this.rules = new ArrayList<RouteRuleInfo>();
    }
    this.rules.add(elem);
  }

  public List<RouteRuleInfo> getRules() {
    return this.rules;
  }

  public RouteInfo setRules(List<RouteRuleInfo> rules) {
    this.rules = rules;
    return this;
  }

  public void unsetRules() {
    this.rules = null;
  }

  /** Returns true if field rules is set (has been assigned a value) and false otherwise */
  public boolean isSetRules() {
    return this.rules != null;
  }

  public void setRulesIsSet(boolean value) {
    if (!value) {
      this.rules = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SID:
      if (value == null) {
        unsetSid();
      } else {
        setSid((String)value);
      }
      break;

    case NODES:
      if (value == null) {
        unsetNodes();
      } else {
        setNodes((List<RouteNodeInfo>)value);
      }
      break;

    case STRATEGIES:
      if (value == null) {
        unsetStrategies();
      } else {
        setStrategies((Map<String,RouteStrategyInfo>)value);
      }
      break;

    case RULES:
      if (value == null) {
        unsetRules();
      } else {
        setRules((List<RouteRuleInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SID:
      return getSid();

    case NODES:
      return getNodes();

    case STRATEGIES:
      return getStrategies();

    case RULES:
      return getRules();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SID:
      return isSetSid();
    case NODES:
      return isSetNodes();
    case STRATEGIES:
      return isSetStrategies();
    case RULES:
      return isSetRules();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RouteInfo)
      return this.equals((RouteInfo)that);
    return false;
  }

  public boolean equals(RouteInfo that) {
    if (that == null)
      return false;

    boolean this_present_sid = true && this.isSetSid();
    boolean that_present_sid = true && that.isSetSid();
    if (this_present_sid || that_present_sid) {
      if (!(this_present_sid && that_present_sid))
        return false;
      if (!this.sid.equals(that.sid))
        return false;
    }

    boolean this_present_nodes = true && this.isSetNodes();
    boolean that_present_nodes = true && that.isSetNodes();
    if (this_present_nodes || that_present_nodes) {
      if (!(this_present_nodes && that_present_nodes))
        return false;
      if (!this.nodes.equals(that.nodes))
        return false;
    }

    boolean this_present_strategies = true && this.isSetStrategies();
    boolean that_present_strategies = true && that.isSetStrategies();
    if (this_present_strategies || that_present_strategies) {
      if (!(this_present_strategies && that_present_strategies))
        return false;
      if (!this.strategies.equals(that.strategies))
        return false;
    }

    boolean this_present_rules = true && this.isSetRules();
    boolean that_present_rules = true && that.isSetRules();
    if (this_present_rules || that_present_rules) {
      if (!(this_present_rules && that_present_rules))
        return false;
      if (!this.rules.equals(that.rules))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RouteInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSid()).compareTo(other.isSetSid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, other.sid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodes()).compareTo(other.isSetNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodes, other.nodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrategies()).compareTo(other.isSetStrategies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrategies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strategies, other.strategies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRules()).compareTo(other.isSetRules());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRules()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rules, other.rules);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RouteInfo(");
    boolean first = true;

    sb.append("sid:");
    if (this.sid == null) {
      sb.append("null");
    } else {
      sb.append(this.sid);
    }
    first = false;
    if (isSetNodes()) {
      if (!first) sb.append(", ");
      sb.append("nodes:");
      if (this.nodes == null) {
        sb.append("null");
      } else {
        sb.append(this.nodes);
      }
      first = false;
    }
    if (isSetStrategies()) {
      if (!first) sb.append(", ");
      sb.append("strategies:");
      if (this.strategies == null) {
        sb.append("null");
      } else {
        sb.append(this.strategies);
      }
      first = false;
    }
    if (isSetRules()) {
      if (!first) sb.append(", ");
      sb.append("rules:");
      if (this.rules == null) {
        sb.append("null");
      } else {
        sb.append(this.rules);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sid' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RouteInfoStandardSchemeFactory implements SchemeFactory {
    public RouteInfoStandardScheme getScheme() {
      return new RouteInfoStandardScheme();
    }
  }

  private static class RouteInfoStandardScheme extends StandardScheme<RouteInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RouteInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sid = iprot.readString();
              struct.setSidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.nodes = new ArrayList<RouteNodeInfo>(_list10.size);
                for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                {
                  RouteNodeInfo _elem12;
                  _elem12 = new RouteNodeInfo();
                  _elem12.read(iprot);
                  struct.nodes.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setNodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STRATEGIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map13 = iprot.readMapBegin();
                struct.strategies = new HashMap<String,RouteStrategyInfo>(2*_map13.size);
                for (int _i14 = 0; _i14 < _map13.size; ++_i14)
                {
                  String _key15;
                  RouteStrategyInfo _val16;
                  _key15 = iprot.readString();
                  _val16 = new RouteStrategyInfo();
                  _val16.read(iprot);
                  struct.strategies.put(_key15, _val16);
                }
                iprot.readMapEnd();
              }
              struct.setStrategiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RULES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list17 = iprot.readListBegin();
                struct.rules = new ArrayList<RouteRuleInfo>(_list17.size);
                for (int _i18 = 0; _i18 < _list17.size; ++_i18)
                {
                  RouteRuleInfo _elem19;
                  _elem19 = new RouteRuleInfo();
                  _elem19.read(iprot);
                  struct.rules.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setRulesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RouteInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sid != null) {
        oprot.writeFieldBegin(SID_FIELD_DESC);
        oprot.writeString(struct.sid);
        oprot.writeFieldEnd();
      }
      if (struct.nodes != null) {
        if (struct.isSetNodes()) {
          oprot.writeFieldBegin(NODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.nodes.size()));
            for (RouteNodeInfo _iter20 : struct.nodes)
            {
              _iter20.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.strategies != null) {
        if (struct.isSetStrategies()) {
          oprot.writeFieldBegin(STRATEGIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.strategies.size()));
            for (Map.Entry<String, RouteStrategyInfo> _iter21 : struct.strategies.entrySet())
            {
              oprot.writeString(_iter21.getKey());
              _iter21.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.rules != null) {
        if (struct.isSetRules()) {
          oprot.writeFieldBegin(RULES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rules.size()));
            for (RouteRuleInfo _iter22 : struct.rules)
            {
              _iter22.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RouteInfoTupleSchemeFactory implements SchemeFactory {
    public RouteInfoTupleScheme getScheme() {
      return new RouteInfoTupleScheme();
    }
  }

  private static class RouteInfoTupleScheme extends TupleScheme<RouteInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RouteInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.sid);
      BitSet optionals = new BitSet();
      if (struct.isSetNodes()) {
        optionals.set(0);
      }
      if (struct.isSetStrategies()) {
        optionals.set(1);
      }
      if (struct.isSetRules()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetNodes()) {
        {
          oprot.writeI32(struct.nodes.size());
          for (RouteNodeInfo _iter23 : struct.nodes)
          {
            _iter23.write(oprot);
          }
        }
      }
      if (struct.isSetStrategies()) {
        {
          oprot.writeI32(struct.strategies.size());
          for (Map.Entry<String, RouteStrategyInfo> _iter24 : struct.strategies.entrySet())
          {
            oprot.writeString(_iter24.getKey());
            _iter24.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetRules()) {
        {
          oprot.writeI32(struct.rules.size());
          for (RouteRuleInfo _iter25 : struct.rules)
          {
            _iter25.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RouteInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sid = iprot.readString();
      struct.setSidIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.nodes = new ArrayList<RouteNodeInfo>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            RouteNodeInfo _elem28;
            _elem28 = new RouteNodeInfo();
            _elem28.read(iprot);
            struct.nodes.add(_elem28);
          }
        }
        struct.setNodesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map29 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.strategies = new HashMap<String,RouteStrategyInfo>(2*_map29.size);
          for (int _i30 = 0; _i30 < _map29.size; ++_i30)
          {
            String _key31;
            RouteStrategyInfo _val32;
            _key31 = iprot.readString();
            _val32 = new RouteStrategyInfo();
            _val32.read(iprot);
            struct.strategies.put(_key31, _val32);
          }
        }
        struct.setStrategiesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.rules = new ArrayList<RouteRuleInfo>(_list33.size);
          for (int _i34 = 0; _i34 < _list33.size; ++_i34)
          {
            RouteRuleInfo _elem35;
            _elem35 = new RouteRuleInfo();
            _elem35.read(iprot);
            struct.rules.add(_elem35);
          }
        }
        struct.setRulesIsSet(true);
      }
    }
  }

}

