/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qq.routercenter.share.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.annotation.JsonInclude;

@XmlAccessorType(XmlAccessType.PROPERTY)
@XmlRootElement
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class RouteInfoList implements org.apache.thrift.TBase<RouteInfoList, RouteInfoList._Fields>, java.io.Serializable, Cloneable, Comparable<RouteInfoList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RouteInfoList");

  private static final org.apache.thrift.protocol.TField ROUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("routes", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RouteInfoListStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RouteInfoListTupleSchemeFactory());
  }

  public List<RouteInfo> routes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROUTES((short)1, "routes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROUTES
          return ROUTES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROUTES, new org.apache.thrift.meta_data.FieldMetaData("routes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RouteInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RouteInfoList.class, metaDataMap);
  }

  public RouteInfoList() {
  }

  public RouteInfoList(
    List<RouteInfo> routes)
  {
    this();
    this.routes = routes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RouteInfoList(RouteInfoList other) {
    if (other.isSetRoutes()) {
      List<RouteInfo> __this__routes = new ArrayList<RouteInfo>(other.routes.size());
      for (RouteInfo other_element : other.routes) {
        __this__routes.add(new RouteInfo(other_element));
      }
      this.routes = __this__routes;
    }
  }

  public RouteInfoList deepCopy() {
    return new RouteInfoList(this);
  }

  @Override
  public void clear() {
    this.routes = null;
  }

  public int getRoutesSize() {
    return (this.routes == null) ? 0 : this.routes.size();
  }

  public java.util.Iterator<RouteInfo> getRoutesIterator() {
    return (this.routes == null) ? null : this.routes.iterator();
  }

  public void addToRoutes(RouteInfo elem) {
    if (this.routes == null) {
      this.routes = new ArrayList<RouteInfo>();
    }
    this.routes.add(elem);
  }

  public List<RouteInfo> getRoutes() {
    return this.routes;
  }

  public RouteInfoList setRoutes(List<RouteInfo> routes) {
    this.routes = routes;
    return this;
  }

  public void unsetRoutes() {
    this.routes = null;
  }

  /** Returns true if field routes is set (has been assigned a value) and false otherwise */
  public boolean isSetRoutes() {
    return this.routes != null;
  }

  public void setRoutesIsSet(boolean value) {
    if (!value) {
      this.routes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROUTES:
      if (value == null) {
        unsetRoutes();
      } else {
        setRoutes((List<RouteInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROUTES:
      return getRoutes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROUTES:
      return isSetRoutes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RouteInfoList)
      return this.equals((RouteInfoList)that);
    return false;
  }

  public boolean equals(RouteInfoList that) {
    if (that == null)
      return false;

    boolean this_present_routes = true && this.isSetRoutes();
    boolean that_present_routes = true && that.isSetRoutes();
    if (this_present_routes || that_present_routes) {
      if (!(this_present_routes && that_present_routes))
        return false;
      if (!this.routes.equals(that.routes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RouteInfoList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRoutes()).compareTo(other.isSetRoutes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoutes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routes, other.routes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RouteInfoList(");
    boolean first = true;

    sb.append("routes:");
    if (this.routes == null) {
      sb.append("null");
    } else {
      sb.append(this.routes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (routes == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'routes' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RouteInfoListStandardSchemeFactory implements SchemeFactory {
    public RouteInfoListStandardScheme getScheme() {
      return new RouteInfoListStandardScheme();
    }
  }

  private static class RouteInfoListStandardScheme extends StandardScheme<RouteInfoList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RouteInfoList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROUTES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.routes = new ArrayList<RouteInfo>(_list36.size);
                for (int _i37 = 0; _i37 < _list36.size; ++_i37)
                {
                  RouteInfo _elem38;
                  _elem38 = new RouteInfo();
                  _elem38.read(iprot);
                  struct.routes.add(_elem38);
                }
                iprot.readListEnd();
              }
              struct.setRoutesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RouteInfoList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.routes != null) {
        oprot.writeFieldBegin(ROUTES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.routes.size()));
          for (RouteInfo _iter39 : struct.routes)
          {
            _iter39.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RouteInfoListTupleSchemeFactory implements SchemeFactory {
    public RouteInfoListTupleScheme getScheme() {
      return new RouteInfoListTupleScheme();
    }
  }

  private static class RouteInfoListTupleScheme extends TupleScheme<RouteInfoList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RouteInfoList struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.routes.size());
        for (RouteInfo _iter40 : struct.routes)
        {
          _iter40.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RouteInfoList struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.routes = new ArrayList<RouteInfo>(_list41.size);
        for (int _i42 = 0; _i42 < _list41.size; ++_i42)
        {
          RouteInfo _elem43;
          _elem43 = new RouteInfo();
          _elem43.read(iprot);
          struct.routes.add(_elem43);
        }
      }
      struct.setRoutesIsSet(true);
    }
  }

}

