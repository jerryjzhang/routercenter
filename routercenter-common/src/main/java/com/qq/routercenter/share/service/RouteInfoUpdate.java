/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.qq.routercenter.share.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RouteInfoUpdate implements org.apache.thrift.TBase<RouteInfoUpdate, RouteInfoUpdate._Fields>, java.io.Serializable, Cloneable, Comparable<RouteInfoUpdate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RouteInfoUpdate");

  private static final org.apache.thrift.protocol.TField HAS_UPATE_FIELD_DESC = new org.apache.thrift.protocol.TField("hasUpate", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField HAS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("hasCode", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RouteInfoUpdateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RouteInfoUpdateTupleSchemeFactory());
  }

  public boolean hasUpate; // optional
  public RouteInfo result; // optional
  public String hasCode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HAS_UPATE((short)1, "hasUpate"),
    RESULT((short)2, "result"),
    HAS_CODE((short)3, "hasCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HAS_UPATE
          return HAS_UPATE;
        case 2: // RESULT
          return RESULT;
        case 3: // HAS_CODE
          return HAS_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HASUPATE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.HAS_UPATE,_Fields.RESULT,_Fields.HAS_CODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HAS_UPATE, new org.apache.thrift.meta_data.FieldMetaData("hasUpate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RouteInfo.class)));
    tmpMap.put(_Fields.HAS_CODE, new org.apache.thrift.meta_data.FieldMetaData("hasCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RouteInfoUpdate.class, metaDataMap);
  }

  public RouteInfoUpdate() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RouteInfoUpdate(RouteInfoUpdate other) {
    __isset_bitfield = other.__isset_bitfield;
    this.hasUpate = other.hasUpate;
    if (other.isSetResult()) {
      this.result = new RouteInfo(other.result);
    }
    if (other.isSetHasCode()) {
      this.hasCode = other.hasCode;
    }
  }

  public RouteInfoUpdate deepCopy() {
    return new RouteInfoUpdate(this);
  }

  @Override
  public void clear() {
    setHasUpateIsSet(false);
    this.hasUpate = false;
    this.result = null;
    this.hasCode = null;
  }

  public boolean isHasUpate() {
    return this.hasUpate;
  }

  public RouteInfoUpdate setHasUpate(boolean hasUpate) {
    this.hasUpate = hasUpate;
    setHasUpateIsSet(true);
    return this;
  }

  public void unsetHasUpate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASUPATE_ISSET_ID);
  }

  /** Returns true if field hasUpate is set (has been assigned a value) and false otherwise */
  public boolean isSetHasUpate() {
    return EncodingUtils.testBit(__isset_bitfield, __HASUPATE_ISSET_ID);
  }

  public void setHasUpateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASUPATE_ISSET_ID, value);
  }

  public RouteInfo getResult() {
    return this.result;
  }

  public RouteInfoUpdate setResult(RouteInfo result) {
    this.result = result;
    return this;
  }

  public void unsetResult() {
    this.result = null;
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return this.result != null;
  }

  public void setResultIsSet(boolean value) {
    if (!value) {
      this.result = null;
    }
  }

  public String getHasCode() {
    return this.hasCode;
  }

  public RouteInfoUpdate setHasCode(String hasCode) {
    this.hasCode = hasCode;
    return this;
  }

  public void unsetHasCode() {
    this.hasCode = null;
  }

  /** Returns true if field hasCode is set (has been assigned a value) and false otherwise */
  public boolean isSetHasCode() {
    return this.hasCode != null;
  }

  public void setHasCodeIsSet(boolean value) {
    if (!value) {
      this.hasCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HAS_UPATE:
      if (value == null) {
        unsetHasUpate();
      } else {
        setHasUpate((Boolean)value);
      }
      break;

    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((RouteInfo)value);
      }
      break;

    case HAS_CODE:
      if (value == null) {
        unsetHasCode();
      } else {
        setHasCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HAS_UPATE:
      return Boolean.valueOf(isHasUpate());

    case RESULT:
      return getResult();

    case HAS_CODE:
      return getHasCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HAS_UPATE:
      return isSetHasUpate();
    case RESULT:
      return isSetResult();
    case HAS_CODE:
      return isSetHasCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RouteInfoUpdate)
      return this.equals((RouteInfoUpdate)that);
    return false;
  }

  public boolean equals(RouteInfoUpdate that) {
    if (that == null)
      return false;

    boolean this_present_hasUpate = true && this.isSetHasUpate();
    boolean that_present_hasUpate = true && that.isSetHasUpate();
    if (this_present_hasUpate || that_present_hasUpate) {
      if (!(this_present_hasUpate && that_present_hasUpate))
        return false;
      if (this.hasUpate != that.hasUpate)
        return false;
    }

    boolean this_present_result = true && this.isSetResult();
    boolean that_present_result = true && that.isSetResult();
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (!this.result.equals(that.result))
        return false;
    }

    boolean this_present_hasCode = true && this.isSetHasCode();
    boolean that_present_hasCode = true && that.isSetHasCode();
    if (this_present_hasCode || that_present_hasCode) {
      if (!(this_present_hasCode && that_present_hasCode))
        return false;
      if (!this.hasCode.equals(that.hasCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RouteInfoUpdate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHasUpate()).compareTo(other.isSetHasUpate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasUpate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasUpate, other.hasUpate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasCode()).compareTo(other.isSetHasCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasCode, other.hasCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RouteInfoUpdate(");
    boolean first = true;

    if (isSetHasUpate()) {
      sb.append("hasUpate:");
      sb.append(this.hasUpate);
      first = false;
    }
    if (isSetResult()) {
      if (!first) sb.append(", ");
      sb.append("result:");
      if (this.result == null) {
        sb.append("null");
      } else {
        sb.append(this.result);
      }
      first = false;
    }
    if (isSetHasCode()) {
      if (!first) sb.append(", ");
      sb.append("hasCode:");
      if (this.hasCode == null) {
        sb.append("null");
      } else {
        sb.append(this.hasCode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (result != null) {
      result.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RouteInfoUpdateStandardSchemeFactory implements SchemeFactory {
    public RouteInfoUpdateStandardScheme getScheme() {
      return new RouteInfoUpdateStandardScheme();
    }
  }

  private static class RouteInfoUpdateStandardScheme extends StandardScheme<RouteInfoUpdate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RouteInfoUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HAS_UPATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasUpate = iprot.readBool();
              struct.setHasUpateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.result = new RouteInfo();
              struct.result.read(iprot);
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HAS_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hasCode = iprot.readString();
              struct.setHasCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RouteInfoUpdate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetHasUpate()) {
        oprot.writeFieldBegin(HAS_UPATE_FIELD_DESC);
        oprot.writeBool(struct.hasUpate);
        oprot.writeFieldEnd();
      }
      if (struct.result != null) {
        if (struct.isSetResult()) {
          oprot.writeFieldBegin(RESULT_FIELD_DESC);
          struct.result.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hasCode != null) {
        if (struct.isSetHasCode()) {
          oprot.writeFieldBegin(HAS_CODE_FIELD_DESC);
          oprot.writeString(struct.hasCode);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RouteInfoUpdateTupleSchemeFactory implements SchemeFactory {
    public RouteInfoUpdateTupleScheme getScheme() {
      return new RouteInfoUpdateTupleScheme();
    }
  }

  private static class RouteInfoUpdateTupleScheme extends TupleScheme<RouteInfoUpdate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RouteInfoUpdate struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHasUpate()) {
        optionals.set(0);
      }
      if (struct.isSetResult()) {
        optionals.set(1);
      }
      if (struct.isSetHasCode()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetHasUpate()) {
        oprot.writeBool(struct.hasUpate);
      }
      if (struct.isSetResult()) {
        struct.result.write(oprot);
      }
      if (struct.isSetHasCode()) {
        oprot.writeString(struct.hasCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RouteInfoUpdate struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.hasUpate = iprot.readBool();
        struct.setHasUpateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.result = new RouteInfo();
        struct.result.read(iprot);
        struct.setResultIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hasCode = iprot.readString();
        struct.setHasCodeIsSet(true);
      }
    }
  }

}

